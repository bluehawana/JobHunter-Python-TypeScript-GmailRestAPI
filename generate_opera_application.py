#!/usr/bin/env python3
"""
Generate Complete Opera DevOps Application Package
- Customized CV with Prometheus/Grafana monitoring highlights
- Tailored Cover Letter with soft skills and integration expertise
- R2 + Overleaf integration
- Email delivery to hongzhili01@gmail.com
"""
import sys
import os
sys.path.append('backend')

# Load environment variables
from dotenv import load_dotenv
load_dotenv('backend/.env')

from beautiful_pdf_generator import create_beautiful_multi_page_pdf
from cover_letter_generator import CoverLetterGenerator
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def create_enhanced_opera_resume(job_data):
    """Create enhanced resume with Prometheus/Grafana monitoring highlights"""
    
    # Add specific monitoring experience to the job description for LEGO intelligence
    enhanced_job_data = job_data.copy()
    enhanced_job_data['description'] += """
    
    ADDITIONAL REQUIREMENTS FOR LEGO INTELLIGENCE:
    - Prometheus monitoring and alerting
    - Grafana dashboards and visualization
    - High-performance cluster monitoring
    - On-premises GitLab runner optimization
    - Performance comparison between on-prem and AKS
    - CPU usage monitoring and optimization
    - I/O performance analysis and tuning
    - Infrastructure observability and metrics
    """
    
    return create_beautiful_multi_page_pdf(enhanced_job_data)

def send_application_email(cv_pdf, cover_letter_pdf, job_data, cv_overleaf_url="", cl_overleaf_url=""):
    """Send application package via email"""
    try:
        # Email configuration
        sender_email = os.getenv('SENDER_EMAIL', 'leeharvad@gmail.com')
        sender_password = os.getenv('SENDER_GMAIL_PASSWORD')
        recipient_email = 'hongzhili01@gmail.com'
        
        if not sender_password:
            logger.error("❌ Email password not configured")
            return False
        
        # Create message
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient_email
        msg['Subject'] = f"Opera DevOps Engineer Application Package - {job_data['company']}"
        
        # Email body
        body = f"""
🎭 OPERA DEVOPS ENGINEER APPLICATION PACKAGE

Dear Hongzhi,

Your customized application package for the DevOps Engineer position at {job_data['company']} is ready!

📊 PACKAGE CONTENTS:
✅ Customized CV (PDF) - DevOps focused with monitoring expertise
✅ Tailored Cover Letter (PDF) - Soft skills and integration highlights
✅ Prometheus/Grafana monitoring experience emphasized
✅ Cross-cultural communication and collaboration skills featured

🎯 KEY HIGHLIGHTS ADDED TO CV:
• Prometheus monitoring and alerting implementation
• Grafana dashboards for high-performance cluster visualization
• On-premises GitLab runner environment optimization
• Performance comparison analysis between on-prem and AKS
• CPU usage monitoring and I/O performance tuning
• Infrastructure observability and metrics collection

🔗 OVERLEAF INTEGRATION:
{f"📝 CV Overleaf URL: {cv_overleaf_url}" if cv_overleaf_url else "📝 CV: Local compilation (R2 upload pending)"}
{f"📝 Cover Letter Overleaf URL: {cl_overleaf_url}" if cl_overleaf_url else "📝 Cover Letter: Local compilation (R2 upload pending)"}

🚀 READY FOR OPERA APPLICATION!

The documents are specifically tailored for Opera's DevOps Engineer role with:
• Infrastructure focus matching their requirements
• Kubernetes/Docker expertise highlighted
• Monitoring and observability experience featured
• Cross-functional collaboration skills emphasized
• Norwegian/Swedish cultural approach in cover letter

Best of luck with your application!

---
Generated by JobHunter Automation System
{job_data.get('url', 'https://jobs.opera.com/jobs/6060392-devops-engineer')}
        """
        
        msg.attach(MIMEText(body, 'plain'))
        
        # Attach CV PDF
        if cv_pdf:
            cv_attachment = MIMEBase('application', 'octet-stream')
            cv_attachment.set_payload(cv_pdf)
            encoders.encode_base64(cv_attachment)
            cv_attachment.add_header(
                'Content-Disposition',
                f'attachment; filename="Hongzhi_Li_CV_Opera_DevOps.pdf"'
            )
            msg.attach(cv_attachment)
        
        # Attach Cover Letter PDF
        if cover_letter_pdf:
            cl_attachment = MIMEBase('application', 'octet-stream')
            cl_attachment.set_payload(cover_letter_pdf)
            encoders.encode_base64(cl_attachment)
            cl_attachment.add_header(
                'Content-Disposition',
                f'attachment; filename="Hongzhi_Li_CoverLetter_Opera_DevOps.pdf"'
            )
            msg.attach(cl_attachment)
        
        # Send email
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender_email, sender_password)
        text = msg.as_string()
        server.sendmail(sender_email, recipient_email, text)
        server.quit()
        
        logger.info(f"✅ Application package sent to {recipient_email}")
        return True
        
    except Exception as e:
        logger.error(f"❌ Failed to send email: {e}")
        return False

def main():
    """Generate complete Opera DevOps application package"""
    
    print("🎭 GENERATING OPERA DEVOPS APPLICATION PACKAGE")
    print("=" * 60)
    
    # Opera DevOps job data
    opera_job = {
        'title': 'DevOps Engineer',
        'company': 'Opera',
        'description': '''
        We are looking for a DevOps Engineer to join our team and help us build and maintain our infrastructure.
        
        Key responsibilities:
        - Design, implement and maintain CI/CD pipelines
        - Manage cloud infrastructure on AWS and Azure
        - Implement monitoring and alerting solutions
        - Automate deployment processes
        - Work with Kubernetes and Docker containers
        - Collaborate with development teams
        - Ensure security best practices
        - Optimize system performance and reliability
        
        Required skills:
        - Experience with AWS, Azure, or GCP
        - Proficiency in Kubernetes and Docker
        - CI/CD tools (Jenkins, GitLab CI, GitHub Actions)
        - Infrastructure as Code (Terraform, CloudFormation)
        - Monitoring tools (Prometheus, Grafana, ELK stack)
        - Scripting languages (Python, Bash, PowerShell)
        - Linux system administration
        - Security best practices
        - Agile methodologies
        
        Nice to have:
        - Experience with microservices architecture
        - Knowledge of service mesh (Istio, Linkerd)
        - Database administration (PostgreSQL, MongoDB)
        - Experience with browser technology
        ''',
        'location': 'Oslo, Norway',
        'url': 'https://jobs.opera.com/jobs/6060392-devops-engineer'
    }
    
    print(f"🏢 Company: {opera_job['company']}")
    print(f"💼 Position: {opera_job['title']}")
    print(f"📍 Location: {opera_job['location']}")
    print(f"🔗 URL: {opera_job['url']}")
    
    # Generate enhanced CV with monitoring highlights
    print(f"\n📄 Generating enhanced CV with Prometheus/Grafana highlights...")
    cv_pdf = create_enhanced_opera_resume(opera_job)
    
    cv_success = bool(cv_pdf)
    cv_size = len(cv_pdf) if cv_pdf else 0
    
    print(f"✅ CV Generated: {cv_size:,} bytes" if cv_success else "❌ CV Generation Failed")
    
    # Generate cover letter
    print(f"\n📝 Generating tailored cover letter...")
    cover_letter_generator = CoverLetterGenerator()
    cl_result = cover_letter_generator.create_cover_letter_with_r2_overleaf(opera_job)
    
    cl_pdf = cl_result.get('pdf_content', b'')
    cl_success = cl_result.get('success', False)
    cl_size = cl_result.get('pdf_size', 0)
    
    print(f"✅ Cover Letter Generated: {cl_size:,} bytes" if cl_success else "❌ Cover Letter Generation Failed")
    
    # Save files locally
    if cv_pdf:
        with open('Opera_DevOps_CV_HongzhiLi.pdf', 'wb') as f:
            f.write(cv_pdf)
        print(f"💾 CV saved: Opera_DevOps_CV_HongzhiLi.pdf")
    
    if cl_pdf:
        with open('Opera_DevOps_CoverLetter_HongzhiLi.pdf', 'wb') as f:
            f.write(cl_pdf)
        print(f"💾 Cover Letter saved: Opera_DevOps_CoverLetter_HongzhiLi.pdf")
    
    # Get Overleaf URLs if available
    cv_overleaf_url = ""  # Would be generated by the enhanced CV system
    cl_overleaf_url = cl_result.get('overleaf_url', '')
    
    if cl_overleaf_url:
        print(f"🔗 Cover Letter Overleaf URL: {cl_overleaf_url}")
    
    # Send email with application package
    print(f"\n📧 Sending application package to hongzhili01@gmail.com...")
    
    email_success = send_application_email(
        cv_pdf, 
        cl_pdf, 
        opera_job, 
        cv_overleaf_url, 
        cl_overleaf_url
    )
    
    # Summary
    print(f"\n" + "=" * 60)
    print(f"📊 OPERA DEVOPS APPLICATION SUMMARY")
    print(f"=" * 60)
    
    print(f"✅ CV Generated: {cv_success} ({cv_size:,} bytes)")
    print(f"✅ Cover Letter Generated: {cl_success} ({cl_size:,} bytes)")
    print(f"✅ Email Sent: {email_success}")
    print(f"☁️ R2 Upload: {cl_result.get('r2_upload_success', False)}")
    
    if email_success:
        print(f"\n🎉 COMPLETE SUCCESS!")
        print(f"📧 Application package delivered to hongzhili01@gmail.com")
        print(f"📄 CV: Enhanced with Prometheus/Grafana monitoring expertise")
        print(f"📝 Cover Letter: Tailored with soft skills and integration focus")
        print(f"🔗 Overleaf URLs: Available for manual editing")
        print(f"\n🚀 Ready to apply to Opera!")
    else:
        print(f"\n⚠️ PARTIAL SUCCESS")
        print(f"📄 Documents generated successfully")
        print(f"❌ Email delivery failed - check email configuration")
        print(f"💡 Documents saved locally for manual submission")
    
    return {
        'cv_success': cv_success,
        'cl_success': cl_success,
        'email_success': email_success,
        'cv_size': cv_size,
        'cl_size': cl_size,
        'overleaf_urls': {
            'cv': cv_overleaf_url,
            'cover_letter': cl_overleaf_url
        }
    }

if __name__ == "__main__":
    result = main()
    
    if result['cv_success'] and result['cl_success'] and result['email_success']:
        print(f"\n🎭 OPERA DEVOPS APPLICATION COMPLETE! 🎉")
    else:
        print(f"\n⚠️ Check the summary above for any issues")